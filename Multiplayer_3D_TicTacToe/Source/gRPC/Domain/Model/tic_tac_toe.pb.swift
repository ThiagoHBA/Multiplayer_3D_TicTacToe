// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tic_tac_toe.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Tictactoe_TileStyle: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case cross // = 0
  case circle // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .cross
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .cross
    case 1: self = .circle
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .cross: return 0
    case .circle: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tictactoe_TileStyle: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Tictactoe_TileStyle] = [
    .cross,
    .circle,
  ]
}

#endif  // swift(>=4.2)

public enum Tictactoe_BoardColor: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case blue // = 0
  case red // = 1
  case green // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .blue
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .blue
    case 1: self = .red
    case 2: self = .green
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .blue: return 0
    case .red: return 1
    case .green: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tictactoe_BoardColor: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Tictactoe_BoardColor] = [
    .blue,
    .red,
    .green,
  ]
}

#endif  // swift(>=4.2)

public struct Tictactoe_TilePosition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var row: Int64 = 0

  public var column: Int64 = 0

  public var depth: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tictactoe_Player {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var name: String = String()

  public var tileStyle: Tictactoe_TileStyle = .cross

  public var tiles: [Tictactoe_TilePosition] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tictactoe_Tile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var boardID: Int64 = 0

  public var style: Tictactoe_TileStyle = .cross

  public var position: Tictactoe_TilePosition {
    get {return _position ?? Tictactoe_TilePosition()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _position: Tictactoe_TilePosition? = nil
}

public struct Tictactoe_WinningTiles {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var tiles: [Tictactoe_TilePosition] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tictactoe_Board {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int64 = 0

  public var color: Tictactoe_BoardColor = .blue

  public var tiles: [Tictactoe_Tile] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tictactoe_GameflowParameters {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var players: [Tictactoe_Player] = []

  public var shiftPlayerID: Int64 = 0

  public var gameStarted: Bool = false

  public var gameEnded: Bool = false

  public var boards: [Tictactoe_Board] = []

  public var winner: Tictactoe_Player {
    get {return _winner ?? Tictactoe_Player()}
    set {_winner = newValue}
  }
  /// Returns true if `winner` has been explicitly set.
  public var hasWinner: Bool {return self._winner != nil}
  /// Clears the value of `winner`. Subsequent reads from it will return its default value.
  public mutating func clearWinner() {self._winner = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _winner: Tictactoe_Player? = nil
}

public struct Tictactoe_ConnectMessageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var port: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tictactoe_StartGameRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Tictactoe_PlayerMoveRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var player: Tictactoe_Player {
    get {return _player ?? Tictactoe_Player()}
    set {_player = newValue}
  }
  /// Returns true if `player` has been explicitly set.
  public var hasPlayer: Bool {return self._player != nil}
  /// Clears the value of `player`. Subsequent reads from it will return its default value.
  public mutating func clearPlayer() {self._player = nil}

  public var boardID: Int64 = 0

  public var addedTile: Tictactoe_Tile {
    get {return _addedTile ?? Tictactoe_Tile()}
    set {_addedTile = newValue}
  }
  /// Returns true if `addedTile` has been explicitly set.
  public var hasAddedTile: Bool {return self._addedTile != nil}
  /// Clears the value of `addedTile`. Subsequent reads from it will return its default value.
  public mutating func clearAddedTile() {self._addedTile = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _player: Tictactoe_Player? = nil
  fileprivate var _addedTile: Tictactoe_Tile? = nil
}

/// MARK:  Response
public struct Tictactoe_ConnectMessageResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var connected: Bool {
    get {return _storage._connected}
    set {_uniqueStorage()._connected = newValue}
  }

  public var identifier: Tictactoe_Player {
    get {return _storage._identifier ?? Tictactoe_Player()}
    set {_uniqueStorage()._identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  public var hasIdentifier: Bool {return _storage._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  public mutating func clearIdentifier() {_uniqueStorage()._identifier = nil}

  public var hostPlayer: Tictactoe_Player {
    get {return _storage._hostPlayer ?? Tictactoe_Player()}
    set {_uniqueStorage()._hostPlayer = newValue}
  }
  /// Returns true if `hostPlayer` has been explicitly set.
  public var hasHostPlayer: Bool {return _storage._hostPlayer != nil}
  /// Clears the value of `hostPlayer`. Subsequent reads from it will return its default value.
  public mutating func clearHostPlayer() {_uniqueStorage()._hostPlayer = nil}

  public var parameters: Tictactoe_GameflowParameters {
    get {return _storage._parameters ?? Tictactoe_GameflowParameters()}
    set {_uniqueStorage()._parameters = newValue}
  }
  /// Returns true if `parameters` has been explicitly set.
  public var hasParameters: Bool {return _storage._parameters != nil}
  /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
  public mutating func clearParameters() {_uniqueStorage()._parameters = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Tictactoe_StartGameResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var starterPlayerID: Int64 = 0

  public var parameters: Tictactoe_GameflowParameters {
    get {return _parameters ?? Tictactoe_GameflowParameters()}
    set {_parameters = newValue}
  }
  /// Returns true if `parameters` has been explicitly set.
  public var hasParameters: Bool {return self._parameters != nil}
  /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
  public mutating func clearParameters() {self._parameters = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _parameters: Tictactoe_GameflowParameters? = nil
}

public struct Tictactoe_PlayerMoveResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var success: Bool = false

  public var parameters: Tictactoe_GameflowParameters {
    get {return _parameters ?? Tictactoe_GameflowParameters()}
    set {_parameters = newValue}
  }
  /// Returns true if `parameters` has been explicitly set.
  public var hasParameters: Bool {return self._parameters != nil}
  /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
  public mutating func clearParameters() {self._parameters = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _parameters: Tictactoe_GameflowParameters? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Tictactoe_TileStyle: @unchecked Sendable {}
extension Tictactoe_BoardColor: @unchecked Sendable {}
extension Tictactoe_TilePosition: @unchecked Sendable {}
extension Tictactoe_Player: @unchecked Sendable {}
extension Tictactoe_Tile: @unchecked Sendable {}
extension Tictactoe_WinningTiles: @unchecked Sendable {}
extension Tictactoe_Board: @unchecked Sendable {}
extension Tictactoe_GameflowParameters: @unchecked Sendable {}
extension Tictactoe_ConnectMessageRequest: @unchecked Sendable {}
extension Tictactoe_StartGameRequest: @unchecked Sendable {}
extension Tictactoe_PlayerMoveRequest: @unchecked Sendable {}
extension Tictactoe_ConnectMessageResponse: @unchecked Sendable {}
extension Tictactoe_StartGameResponse: @unchecked Sendable {}
extension Tictactoe_PlayerMoveResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tictactoe"

extension Tictactoe_TileStyle: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "cross"),
    1: .same(proto: "circle"),
  ]
}

extension Tictactoe_BoardColor: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "blue"),
    1: .same(proto: "red"),
    2: .same(proto: "green"),
  ]
}

extension Tictactoe_TilePosition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TilePosition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "row"),
    2: .same(proto: "column"),
    3: .same(proto: "depth"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.row) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.column) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.depth) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.row != 0 {
      try visitor.visitSingularInt64Field(value: self.row, fieldNumber: 1)
    }
    if self.column != 0 {
      try visitor.visitSingularInt64Field(value: self.column, fieldNumber: 2)
    }
    if self.depth != 0 {
      try visitor.visitSingularInt64Field(value: self.depth, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tictactoe_TilePosition, rhs: Tictactoe_TilePosition) -> Bool {
    if lhs.row != rhs.row {return false}
    if lhs.column != rhs.column {return false}
    if lhs.depth != rhs.depth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tictactoe_Player: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Player"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "tileStyle"),
    4: .same(proto: "tiles"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.tileStyle) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.tiles) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.tileStyle != .cross {
      try visitor.visitSingularEnumField(value: self.tileStyle, fieldNumber: 3)
    }
    if !self.tiles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tiles, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tictactoe_Player, rhs: Tictactoe_Player) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.tileStyle != rhs.tileStyle {return false}
    if lhs.tiles != rhs.tiles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tictactoe_Tile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Tile"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "boardId"),
    2: .same(proto: "style"),
    3: .same(proto: "position"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.style) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 1)
    }
    if self.style != .cross {
      try visitor.visitSingularEnumField(value: self.style, fieldNumber: 2)
    }
    try { if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tictactoe_Tile, rhs: Tictactoe_Tile) -> Bool {
    if lhs.boardID != rhs.boardID {return false}
    if lhs.style != rhs.style {return false}
    if lhs._position != rhs._position {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tictactoe_WinningTiles: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WinningTiles"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tiles"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.tiles) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tiles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tiles, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tictactoe_WinningTiles, rhs: Tictactoe_WinningTiles) -> Bool {
    if lhs.tiles != rhs.tiles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tictactoe_Board: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Board"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "color"),
    3: .same(proto: "tiles"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.color) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.tiles) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.color != .blue {
      try visitor.visitSingularEnumField(value: self.color, fieldNumber: 2)
    }
    if !self.tiles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tiles, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tictactoe_Board, rhs: Tictactoe_Board) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.color != rhs.color {return false}
    if lhs.tiles != rhs.tiles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tictactoe_GameflowParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameflowParameters"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "players"),
    2: .same(proto: "shiftPlayerId"),
    3: .same(proto: "gameStarted"),
    4: .same(proto: "gameEnded"),
    5: .same(proto: "boards"),
    6: .same(proto: "winner"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.players) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.shiftPlayerID) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.gameStarted) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.gameEnded) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.boards) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._winner) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.players.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.players, fieldNumber: 1)
    }
    if self.shiftPlayerID != 0 {
      try visitor.visitSingularInt64Field(value: self.shiftPlayerID, fieldNumber: 2)
    }
    if self.gameStarted != false {
      try visitor.visitSingularBoolField(value: self.gameStarted, fieldNumber: 3)
    }
    if self.gameEnded != false {
      try visitor.visitSingularBoolField(value: self.gameEnded, fieldNumber: 4)
    }
    if !self.boards.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.boards, fieldNumber: 5)
    }
    try { if let v = self._winner {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tictactoe_GameflowParameters, rhs: Tictactoe_GameflowParameters) -> Bool {
    if lhs.players != rhs.players {return false}
    if lhs.shiftPlayerID != rhs.shiftPlayerID {return false}
    if lhs.gameStarted != rhs.gameStarted {return false}
    if lhs.gameEnded != rhs.gameEnded {return false}
    if lhs.boards != rhs.boards {return false}
    if lhs._winner != rhs._winner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tictactoe_ConnectMessageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConnectMessageRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "port"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.port) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.port != 0 {
      try visitor.visitSingularInt64Field(value: self.port, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tictactoe_ConnectMessageRequest, rhs: Tictactoe_ConnectMessageRequest) -> Bool {
    if lhs.port != rhs.port {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tictactoe_StartGameRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StartGameRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tictactoe_StartGameRequest, rhs: Tictactoe_StartGameRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tictactoe_PlayerMoveRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayerMoveRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "player"),
    2: .same(proto: "boardId"),
    3: .same(proto: "addedTile"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._player) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.boardID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._addedTile) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._player {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.boardID != 0 {
      try visitor.visitSingularInt64Field(value: self.boardID, fieldNumber: 2)
    }
    try { if let v = self._addedTile {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tictactoe_PlayerMoveRequest, rhs: Tictactoe_PlayerMoveRequest) -> Bool {
    if lhs._player != rhs._player {return false}
    if lhs.boardID != rhs.boardID {return false}
    if lhs._addedTile != rhs._addedTile {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tictactoe_ConnectMessageResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConnectMessageResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "connected"),
    2: .same(proto: "identifier"),
    3: .same(proto: "hostPlayer"),
    4: .same(proto: "parameters"),
  ]

  fileprivate class _StorageClass {
    var _connected: Bool = false
    var _identifier: Tictactoe_Player? = nil
    var _hostPlayer: Tictactoe_Player? = nil
    var _parameters: Tictactoe_GameflowParameters? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _connected = source._connected
      _identifier = source._identifier
      _hostPlayer = source._hostPlayer
      _parameters = source._parameters
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._connected) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._identifier) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._hostPlayer) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._parameters) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._connected != false {
        try visitor.visitSingularBoolField(value: _storage._connected, fieldNumber: 1)
      }
      try { if let v = _storage._identifier {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._hostPlayer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._parameters {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tictactoe_ConnectMessageResponse, rhs: Tictactoe_ConnectMessageResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._connected != rhs_storage._connected {return false}
        if _storage._identifier != rhs_storage._identifier {return false}
        if _storage._hostPlayer != rhs_storage._hostPlayer {return false}
        if _storage._parameters != rhs_storage._parameters {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tictactoe_StartGameResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StartGameResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "starterPlayerId"),
    2: .same(proto: "parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.starterPlayerID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._parameters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.starterPlayerID != 0 {
      try visitor.visitSingularInt64Field(value: self.starterPlayerID, fieldNumber: 1)
    }
    try { if let v = self._parameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tictactoe_StartGameResponse, rhs: Tictactoe_StartGameResponse) -> Bool {
    if lhs.starterPlayerID != rhs.starterPlayerID {return false}
    if lhs._parameters != rhs._parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tictactoe_PlayerMoveResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayerMoveResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
    2: .same(proto: "parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.success) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._parameters) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 1)
    }
    try { if let v = self._parameters {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Tictactoe_PlayerMoveResponse, rhs: Tictactoe_PlayerMoveResponse) -> Bool {
    if lhs.success != rhs.success {return false}
    if lhs._parameters != rhs._parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
